name: Build Signed AAB/APK from HTML

on:
  workflow_dispatch:
  push:
    paths:
      - "web/**"
      - ".github/workflows/build.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      APP_NAME: "HTML-to-AAP-Converter"
      APP_ID: "com.html.aap.converter"
      VERSION_CODE: "1"
      VERSION_NAME: "1.0"
      MIN_SDK: "21"
      TARGET_SDK: "35"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK cmdline-tools (robust)
        run: |
          set -e
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"

          URL_TOOLS="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
          echo "Downloading Android cmdline-toolsâ€¦"
          curl --fail --location --show-error \
               --retry 5 --retry-delay 2 --retry-connrefused \
               -o /tmp/tools.zip "$URL_TOOLS"

          unzip -q /tmp/tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-${TARGET_SDK}" \
            "build-tools;${TARGET_SDK}.0.0"

          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/${TARGET_SDK}.0.0" >> "$GITHUB_PATH"

      - name: Install Gradle 8.7 (robust)
        run: |
          set -e
          GRADLE_VER=8.7
          URL1="https://services.gradle.org/distributions/gradle-${GRADLE_VER}-bin.zip"
          URL2="https://downloads.gradle-dn.com/distributions/gradle-${GRADLE_VER}-bin.zip"
          curl --fail --location --show-error --retry 5 --retry-delay 2 --retry-connrefused -o /tmp/gradle.zip "$URL1" \
            || curl --fail --location --show-error --retry 5 --retry-delay 2 --retry-connrefused -o /tmp/gradle.zip "$URL2"
          unzip -q /tmp/gradle.zip -d "$HOME"
          echo "$HOME/gradle-${GRADLE_VER}/bin" >> "$GITHUB_PATH"
          gradle -v

      - name: Generate minimal Android WebView project (matches APP_ID)
        run: |
          set -e
          APP_ROOT=app-template
          APP_DIR=$APP_ROOT/app
          PKG_PATH="$(echo "${APP_ID}" | tr '.' '/')"

          mkdir -p "$APP_DIR/src/main/assets/www" \
                   "$APP_DIR/src/main/java/${PKG_PATH}" \
                   "$APP_DIR/src/main/res/layout" \
                   "$APP_DIR/src/main/res/values" \
                   "$APP_DIR/src/main/res/mipmap-anydpi-v26"

          # settings.gradle
          cat > "$APP_ROOT/settings.gradle" <<'EOF'
pluginManagement { repositories { google(); mavenCentral() } }
dependencyResolutionManagement { repositories { google(); mavenCentral() } }
rootProject.name = "WebAppShell"
include(":app")
EOF

          # root build.gradle (AGP classpath only)
          cat > "$APP_ROOT/build.gradle" <<'EOF'
buildscript {
  repositories { google(); mavenCentral() }
  dependencies { classpath "com.android.tools.build:gradle:8.5.2" }
}
EOF

          # gradle.properties
          cat > "$APP_ROOT/gradle.properties" <<'EOF'
org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
android.useAndroidX=true
android.nonTransitiveRClass=true
EOF

          # module build.gradle (literal SDK numbers to avoid early expansion issues)
          cat > "$APP_DIR/build.gradle" <<EOF
apply plugin: "com.android.application"

android {
  namespace "${APP_ID}"
  compileSdk 35

  defaultConfig {
    applicationId "${APP_ID}"
    minSdk 21
    targetSdk 35
    versionCode ${VERSION_CODE}
    versionName "${VERSION_NAME}"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
    }
  }
}

dependencies {
  implementation "androidx.appcompat:appcompat:1.7.0"
  implementation "androidx.activity:activity:1.9.2"
  implementation "androidx.webkit:webkit:1.10.0"
}
EOF

          : > "$APP_DIR/proguard-rules.pro"

          # Manifest (fully-qualified activity)
          cat > "$APP_DIR/src/main/AndroidManifest.xml" <<EOF
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
  <application android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:allowBackup="true" android:supportsRtl="true">
    <activity android:name="${APP_ID}.MainActivity" android:exported="true">
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
    </activity>
  </application>
</manifest>
EOF

          # resources
          echo "<resources><string name=\"app_name\">${APP_NAME}</string></resources>" > "$APP_DIR/src/main/res/values/strings.xml"
          echo "<resources><color name=\"ic_launcher_background\">#FFFFFF</color></resources>" > "$APP_DIR/src/main/res/values/colors.xml"
          cat > "$APP_DIR/src/main/res/layout/activity_main.xml" <<'EOF'
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent">
  <WebView android:id="@+id/webview" android:layout_width="match_parent" android:layout_height="match_parent"/>
</FrameLayout>
EOF
          cat > "$APP_DIR/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" <<'EOF'
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
  <background android:drawable="@color/ic_launcher_background"/>
  <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
EOF
          cat > "$APP_DIR/src/main/res/mipmap-anydpi-v26/ic_launcher_foreground.xml" <<'EOF'
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="108dp" android:height="108dp" android:viewportWidth="108" android:viewportHeight="108">
  <path android:fillColor="#4CAF50" android:pathData="M8,54a46,46 0 1,0 92,0a46,46 0 1,0 -92,0z"/>
  <path android:fillColor="#FFFFFF" android:pathData="M30,58h48v8H30z"/>
  <path android:fillColor="#FFFFFF" android:pathData="M54,34L70,74H38z"/>
</vector>
EOF

          # MainActivity in the APP_ID package & folder
          cat > "$APP_DIR/src/main/java/${PKG_PATH}/MainActivity.java" <<'EOF'
package REPLACE_ME;
import android.os.Bundle;
import android.webkit.WebSettings;
import android.webkit.WebView;
import androidx.activity.ComponentActivity;
public class MainActivity extends ComponentActivity {
  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    WebView w = new WebView(this); setContentView(w);
    WebSettings s = w.getSettings(); s.setJavaScriptEnabled(true); s.setDomStorageEnabled(true);
    WebView.setWebContentsDebuggingEnabled(true);
    w.loadUrl("file:///android_asset/www/index.html");
  }
}
EOF
          sed -i "s/^package REPLACE_ME;/package ${APP_ID};/" "$APP_DIR/src/main/java/${PKG_PATH}/MainActivity.java"

      - name: Inject your web assets (index.html, optional zip/icon)
        run: |
          set -e
          APP_DIR=app-template/app
          mkdir -p "$APP_DIR/src/main/assets/www"
          if [ -f web/index.html ]; then
            cp web/index.html "$APP_DIR/src/main/assets/www/index.html"
          else
            printf '<h1>%s</h1><p>It works ðŸŽ‰</p>\n' "${APP_NAME}" > "$APP_DIR/src/main/assets/www/index.html"
          fi
          [ -f web/assets.zip ] && unzip -oq web/assets.zip -d "$APP_DIR/src/main/assets/www" || true
          [ -f web/icon.png ] && cp web/icon.png "$APP_DIR/src/main/res/mipmap-anydpi-v26/ic_launcher_foreground.png" || true

      - name: Create Gradle wrapper
        working-directory: app-template
        run: |
          gradle wrapper
          chmod +x gradlew

      - name: Build release AAB + APK (with retry)
        working-directory: app-template
        run: |
          set -e
          try_build() { ./gradlew --no-daemon --info --stacktrace :app:bundleRelease :app:assembleRelease; }
          try_build || (echo "First attempt failed, retryingâ€¦"; ./gradlew --no-daemon --refresh-dependencies clean; try_build)

      - name: List outputs (debug)
        run: |
          echo "::group::bundle/release"; ls -lah app-template/app/build/outputs/bundle/release || true; echo "::endgroup::"
          echo "::group::apk/release";    ls -lah app-template/app/build/outputs/apk/release    || true; echo "::endgroup::"

      - name: Upload build artifacts (unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-build
          path: |
            app-template/app/build/outputs/bundle/release/*.aab
            app-template/app/build/outputs/apk/release/*.apk
