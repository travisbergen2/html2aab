name: Build Signed AAB/APK from HTML

on:
  workflow_dispatch:
  push:
    paths:
      - "web/**"
      - ".github/workflows/build.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      APP_NAME: "HTML-to-AAP-Converter"   # ASCII keeps quoting simple
      APP_ID: "com.html.aap.converter"
      VERSION_CODE: "1"
      VERSION_NAME: "1.0"
      MIN_SDK: "21"
      TARGET_SDK: "35"
      PERMISSIONS: "INTERNET,ACCESS_NETWORK_STATE"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK cmdline-tools
        run: |
          set -e
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o /tmp/tools.zip
          unzip -q /tmp/tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "platform-tools" "platforms;android-${TARGET_SDK}" "build-tools;${TARGET_SDK}.0.0"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/${TARGET_SDK}.0.0" >> "$GITHUB_PATH"

      - name: Install Gradle (for wrapper generation)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gradle
          gradle -v

      - name: Generate minimal Android WebView project (no heredocs)
        run: |
          set -e
          APP_DIR=app-template/app
          mkdir -p "$APP_DIR/src/main/assets/www" \
                   "$APP_DIR/src/main/java/com/example/app" \
                   "$APP_DIR/src/main/res/layout" \
                   "$APP_DIR/src/main/res/values" \
                   "$APP_DIR/src/main/res/mipmap-anydpi-v26"

          # settings.gradle
          printf '%s\n' \
            "pluginManagement { repositories { google(); mavenCentral() } }" \
            "dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS); repositories { google(); mavenCentral() } }" \
            'rootProject.name = "WebAppShell"' \
            'include(":app")' \
            > app-template/settings.gradle

          # app/build.gradle (values will be tweaked next step; start with defaults)
          printf '%s\n' \
            "plugins { id 'com.android.application' }" \
            "android {" \
            "  namespace 'com.example.app'" \
            "  compileSdk 35" \
            "  defaultConfig {" \
            "    applicationId 'com.example.app'" \
            "    minSdk 21" \
            "    targetSdk 35" \
            "    versionCode 1" \
            "    versionName '1.0'" \
            "  }" \
            "  buildTypes {" \
            "    release {" \
            "      minifyEnabled false" \
            "      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'" \
            "    }" \
            "  }" \
            "}" \
            "dependencies {" \
            "  implementation 'androidx.appcompat:appcompat:1.7.0'" \
            "  implementation 'androidx.activity:activity:1.9.2'" \
            "  implementation 'androidx.webkit:webkit:1.10.0'" \
            "}" \
            > "$APP_DIR/build.gradle"

          : > "$APP_DIR/proguard-rules.pro"

          # AndroidManifest.xml (placeholder for permissions)
          printf '%s\n' \
            '<manifest xmlns:android="http://schemas.android.com/apk/res/android">' \
            '  <!--PERMISSIONS-->' \
            '  <application android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:allowBackup="true" android:supportsRtl="true">' \
            '    <activity android:name=".MainActivity" android:exported="true">' \
            '      <intent-filter>' \
            '        <action android:name="android.intent.action.MAIN" />' \
            '        <category android:name="android.intent.category.LAUNCHER" />' \
            '      </intent-filter>' \
            '    </activity>' \
            '  </application>' \
            '</manifest>' \
            > "$APP_DIR/src/main/AndroidManifest.xml"

          # resources
          printf '%s\n' '<resources><string name="app_name">Web App</string></resources>' \
            > "$APP_DIR/src/main/res/values/strings.xml"

          printf '%s\n' '<resources><color name="ic_launcher_background">#FFFFFF</color></resources>' \
            > "$APP_DIR/src/main/res/values/colors.xml"

          printf '%s\n' \
            '<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent">' \
            '  <WebView android:id="@+id/webview" android:layout_width="match_parent" android:layout_height="match_parent"/>' \
            '</FrameLayout>' \
            > "$APP_DIR/src/main/res/layout/activity_main.xml"

          printf '%s\n' \
            '<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">' \
            '  <background android:drawable="@color/ic_launcher_background"/>' \
            '  <foreground android:drawable="@mipmap/ic_launcher_foreground"/>' \
            '</adaptive-icon>' \
            > "$APP_DIR/src/main/res/mipmap-anydpi-v26/ic_launcher.xml"

          printf '%s\n' \
            '<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="108dp" android:height="108dp" android:viewportWidth="108" android:viewportHeight="108">' \
            '  <path android:fillColor="#4CAF50" android:pathData="M8,54a46,46 0 1,0 92,0a46,46 0 1,0 -92,0z"/>' \
            '  <path android:fillColor="#FFFFFF" android:pathData="M30,58h48v8H30z"/>' \
            '  <path android:fillColor="#FFFFFF" android:pathData="M54,34L70,74H38z"/>' \
            '</vector>' \
            > "$APP_DIR/src/main/res/mipmap-anydpi-v26/ic_launcher_foreground.xml"

          # MainActivity.java
          printf '%s\n' \
            'package com.example.app;' \
            'import android.os.Bundle;' \
            'import android.webkit.WebSettings;' \
            'import android.webkit.WebView;' \
            'import androidx.activity.ComponentActivity;' \
            'public class MainActivity extends ComponentActivity {' \
            '  @Override protected void onCreate(Bundle savedInstanceState) {' \
            '    super.onCreate(savedInstanceState);' \
            '    WebView w = new WebView(this); setContentView(w);' \
            '    WebSettings s = w.getSettings(); s.setJavaScriptEnabled(true); s.setDomStorageEnabled(true);' \
            '    WebView.setWebContentsDebuggingEnabled(true);' \
            '    w.loadUrl("file:///android_asset/www/index.html");' \
            '  }' \
            '}' \
            > "$APP_DIR/src/main/java/com/example/app/MainActivity.java"

      - name: Inject metadata, permissions, and web assets
        run: |
          set -e
          APP_DIR=app-template/app

          # Replace IDs and versions in build.gradle
          sed -i "s/applicationId '.*'/applicationId '${APP_ID}'/" "$APP_DIR/build.gradle"
          sed -i "s/namespace '.*'/namespace '${APP_ID}'/" "$APP_DIR/build.gradle"
          sed -i "s/minSdk .*/minSdk ${MIN_SDK}/" "$APP_DIR/build.gradle"
          sed -i "s/targetSdk .*/targetSdk ${TARGET_SDK}/" "$APP_DIR/build.gradle"
          sed -i "s/versionCode .*/versionCode ${VERSION_CODE}/" "$APP_DIR/build.gradle"
          sed -i "s/versionName '.*'/versionName '${VERSION_NAME}'/" "$APP_DIR/build.gradle"

          # App name
          sed -i "s#<string name=\"app_name\">.*</string>#<string name=\"app_name\">${APP_NAME}</string>#" \
            "$APP_DIR/src/main/res/values/strings.xml"

          # Permissions
          if [ -n "${PERMISSIONS}" ]; then
            IFS=',' read -r -a arr <<< "${PERMISSIONS}"
            for p in "${arr[@]}"; do
              p_trim="$(echo "$p" | xargs)"
              [ -z "$p_trim" ] && continue
              sed -i "s#<!--PERMISSIONS-->#<uses-permission android:name=\"android.permission.${p_trim}\" />\n    <!--PERMISSIONS-->#" \
                "$APP_DIR/src/main/AndroidManifest.xml"
            done
          fi

          # Web assets: ensure index.html
          mkdir -p "$APP_DIR/src/main/assets/www"
          if [ -f web/index.html ]; then
            cp web/index.html "$APP_DIR/src/main/assets/www/index.html"
          else
            printf '<h1>%s</h1><p>It works ðŸŽ‰</p>\n' "${APP_NAME}" > "$APP_DIR/src/main/assets/www/index.html"
          fi
          # Optional extras
          if [ -f web/assets.zip ]; then unzip -oq web/assets.zip -d "$APP_DIR/src/main/assets/www"; fi
          if [ -f web/icon.png ]; then cp web/icon.png "$APP_DIR/src/main/res/mipmap-anydpi-v26/ic_launcher_foreground.png"; fi

      - name: Create Gradle wrapper
        working-directory: app-template
        run: |
          gradle wrapper
          chmod +x gradlew

      - name: Build release AAB + APK
        working-directory: app-template
        run: ./gradlew --no-daemon --stacktrace :app:bundleRelease :app:assembleRelease

      - name: List outputs (debug)
        run: |
          echo "::group::bundle/release"; ls -lah app-template/app/build/outputs/bundle/release || true; echo "::endgroup::"
          echo "::group::apk/release";    ls -lah app-template/app/build/outputs/apk/release    || true; echo "::endgroup::"

      # Uncomment the next three steps if you want SIGNED outputs (requires repository secrets).
      # - name: Restore keystore from secret
      #   run: echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" | base64 -d > upload.jks
      #
      # - name: Sign AAB & APK
      #   run: |
      #     set -e
      #     AAB="app-template/app/build/outputs/bundle/release/app-release.aab"
      #     APKU="app-template/app/build/outputs/apk/release/app-release-unsigned.apk"
      #     jarsigner -keystore upload.jks -storepass "${{ secrets.UPLOAD_STOREPASS }}" -keypass "${{ secrets.UPLOAD_KEYPASS }}" \
      #       -sigalg SHA256withRSA -digestalg SHA-256 "$AAB" "${{ secrets.UPLOAD_ALIAS }}"
      #     jarsigner -verify -certs "$AAB"
      #     zipalign -p -f 4 "$APKU" aligned.apk
      #     apksigner sign --ks upload.jks --ks-pass pass:"${{ secrets.UPLOAD_STOREPASS }}" \
      #       --ks-key-alias "${{ secrets.UPLOAD_ALIAS }}" --key-pass pass:"${{ secrets.UPLOAD_KEYPASS }}" \
      #       --out "${APP_NAME}.apk" aligned.apk
      #     apksigner verify "${APP_NAME}.apk"
      #     cp "$AAB" "${APP_NAME}.aab"
      #
      # - name: Upload signed artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.APP_NAME }}-signed
      #     path: |
      #       ${{ env.APP_NAME }}.aab
      #       ${{ env.APP_NAME }}.apk

      - name: Upload build artifacts (unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-build
          path: |
            app-template/app/build/outputs/bundle/release/*.aab
            app-template/app/build/outputs/apk/release/*.apk
