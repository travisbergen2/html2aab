name: Build Signed AAB/APK from HTML

on:
  workflow_dispatch:
  push:
    paths:
      - 'web/**'
      - '.github/workflows/build.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      APP_NAME: "HTML-to-AAP-Converter"
      APP_ID: "com.html.aap.converter"
      VERSION_CODE: "1"
      VERSION_NAME: "1.0"
      MIN_SDK: "21"
      TARGET_SDK: "35"
      PERMISSIONS: "INTERNET,ACCESS_NETWORK_STATE"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK cmdline-tools
        run: |
          ANDROID_SDK_ROOT=$HOME/android-sdk
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o /tmp/tools.zip
          unzip -q /tmp/tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "platform-tools" "platforms;android-${TARGET_SDK}" "build-tools;${TARGET_SDK}.0.0"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/${TARGET_SDK}.0.0" >> $GITHUB_PATH

      - name: Install Gradle (for wrapper generation)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gradle
          gradle -v

      - name: Generate minimal Android WebView project
        run: |
          set -e
          mkdir -p app-template/app/src/main/assets/www
          mkdir -p app-template/app/src/main/java/com/example/app
          mkdir -p app-template/app/src/main/res/layout
          mkdir -p app-template/app/src/main/res/values
          mkdir -p app-template/app/src/main/res/mipmap-anydpi-v26

          cat > app-template/settings.gradle <<'EOF'
pluginManagement { repositories { google(); mavenCentral() } }
dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS); repositories { google(); mavenCentral() } }
rootProject.name = "WebAppShell"
include(":app")
EOF

          cat > app-template/app/build.gradle <<'EOF'
plugins { id 'com.android.application' }
android {
  namespace "com.example.app"
  compileSdk 35
  defaultConfig {
    applicationId "com.example.app"
    minSdk 21
    targetSdk 35
    versionCode 1
    versionName "1.0"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
}
dependencies {
  implementation 'androidx.appcompat:appcompat:1.7.0'
  implementation 'androidx.activity:activity:1.9.2'
  implementation 'androidx.webkit:webkit:1.10.0'
}
EOF

          : > app-template/app/proguard-rules.pro

          cat > app-template/app/src/main/AndroidManifest.xml <<'EOF'
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
  <!--PERMISSIONS-->
  <application android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:allowBackup="true" android:supportsRtl="true">
    <activity android:name=".MainActivity" android:exported="true">
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
    </activity>
  </application>
</manifest>
EOF

          cat > app-template/app/src/main/res/values/strings.xml <<'EOF'
<resources><string name="app_name">Web App</string></resources>
EOF

          cat > app-template/app/src/main/res/values/colors.xml <<'EOF'
<resources><color name="ic_launcher_background">#FFFFFF</color></resources>
EOF

          cat > app-template/app/src/main/res/layout/activity_main.xml <<'EOF'
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent">
  <WebView android:id="@+id/webview" android:layout_width="match_parent" android:layout_height="match_parent"/>
</FrameLayout>
EOF

          cat > app-template/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml <<'EOF'
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
  <background android:drawable="@color/ic_launcher_background"/>
  <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
EOF

          cat > app-template/app/src/main/res/mipmap-anydpi-v26/ic_launcher_foreground.xml <<'EOF'
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="108dp" android:height="108dp" android:viewportWidth="108" android:viewportHeight="108">
  <path android:fillColor="#4CAF50" android:pathData="M8,54a46,46 0 1,0 92,0a46,46 0 1,0 -92,0z"/>
  <path android:fillColor="#FFFFFF" android:pathData="M30,58h48v8H30z"/>
  <path android:fillColor="#FFFFFF" android:pathData="M54,34L70,74H38z"/>
</vector>
EOF

          cat > app-template/app/src/main/java/com/example/app/MainActivity.java <<'EOF'
package com.example.app;
import android.os.Bundle;
import android.webkit.WebSettings;
import android.webkit.WebView;
import androidx.activity.ComponentActivity;
public class MainActivity extends ComponentActivity {
  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    WebView w = new WebView(this); setContentView(w);
    WebSettings s = w.getSettings(); s.setJavaScriptEnabled(true); s.setDomStorageEnabled(true);
    WebView.setWebContentsDebuggingEnabled(true);
    w.loadUrl("file:///android_asset/www/index.html");
  }
}
EOF

      - name: Inject metadata, permissions, and web assets
        run: |
          set -e
          APP_DIR=app-template/app
          sed -i "s/applicationId \".*\"/applicationId \"${{ env.APP_ID }}\"/" "$APP_DIR/build.gradle"
          sed -i "s/namespace \".*\"/namespace \"${{ env.APP_ID }}\"/" "$APP_DIR/build.gradle"
          sed -i "s/minSdk .*/minSdk ${{ env.MIN_SDK }}/" "$APP_DIR/build.gradle"
          sed -i "s/targetSdk .*/targetSdk ${{ env.TARGET_SDK }}/" "$APP_DIR/build.gradle"
          sed -i "s/versionCode .*/versionCode ${{ env.VERSION_CODE }}/" "$APP_DIR/build.gradle"
          sed -i "s/versionName \".*\"/versionName \"${{ env.VERSION_NAME }}\"/" "$APP_DIR/build.gradle"
          sed -i 's#<string name="app_name">.*</string>#<string name="app_name">${{ env.APP_NAME }}</string>#' "$APP_DIR/src/main/res/values/strings.xml"

          mkdir -p "$APP_DIR/src/main/assets/www"
          if [ -f web/index.html ]; then
            cp web/index.html "$APP_DIR/src/main/assets/www/index.html"
          else
            echo "<h1>${{ env.APP_NAME }}</h1>" > "$APP_DIR/src/main/assets/www/index.html"
          fi

          if [ -n "${{ env.PERMISSIONS }}" ]; then
            IFS=', ' read -r -a arr <<< "${{ env.PERMISSIONS }}"
            for p in "${arr[@]}"; do
              [ -z "$p" ] && continue
              sed -i "s#<!--PERMISSIONS-->#<uses-permission android:name=\"android.permission.$p\" />\\n  <!--PERMISSIONS-->#" "$APP_DIR/src/main/AndroidManifest.xml"
            done
          fi

          [ -f web/assets.zip ] && unzip -oq web/assets.zip -d "$APP_DIR/src/main/assets/www"
          [ -f web/icon.png ] && cp web/icon.png "$APP_DIR/src/main/res/mipmap-anydpi-v26/ic_launcher_foreground.png"

      - name: Gradle Wrapper
        working-directory: app-template
        run: gradle wrapper

      - name: Build (AAB + unsigned APK)
        working-directory: app-template
        run: ./gradlew --no-daemon clean bundleRelease assembleRelease

      - name: Restore keystore from secret
        run: echo "${{ secrets.MYAPP_KEYSTORE_BASE64 }}" | base64 -d > upload.jks

      - name: Sign AAB
        env:
          STOREPASS: ${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}
          KEYPASS:   ${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}
          ALIAS:     ${{ secrets.MYAPP_UPLOAD_ALIAS }}
        run: |
          AAB=app-template/app/build/outputs/bundle/release/app-release.aab
          jarsigner -keystore upload.jks -storepass "$STOREPASS" -keypass "$KEYPASS" -sigalg SHA256withRSA -digestalg SHA-256 "$AAB" "$ALIAS"
          jarsigner -verify -certs "$AAB"
          cp "$AAB" "${{ env.APP_NAME }}.aab"

      - name: Align & Sign APK
        env:
          STOREPASS: ${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}
          KEYPASS:   ${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}
          ALIAS:     ${{ secrets.MYAPP_UPLOAD_ALIAS }}
        run: |
          APKU=app-template/app/build/outputs/apk/release/app-release-unsigned.apk
          zipalign -p -f 4 "$APKU" aligned.apk
          apksigner sign --ks upload.jks --ks-pass pass:"$STOREPASS" --ks-key-alias "$ALIAS" --key-pass pass:"$KEYPASS" --out "${{ env.APP_NAME }}.apk" aligned.apk
          apksigner verify "${{ env.APP_NAME }}.apk"

      - uses: actions/upload-artifact@v4
        with:
          name: signed-build
          path: |
            ${{ env.APP_NAME }}.aab
            ${{ env.APP_NAME }}.apk
